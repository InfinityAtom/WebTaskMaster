@page "/add-task"
@using WebTaskMaster.Model
@inject NavigationManager NavigationManager
@inject WebTaskMaster.Model.TaskMasterContext DbContext
@inject ISnackbar snackbar
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudContainer MaxWidth="MaxWidth.Medium" Class="page-container">
    <!-- Header Section -->
    <MudPaper Class="header-section">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="header-title">Add New Task</MudText>
        <MudText Typo="Typo.body1" Align="Align.Center" Class="header-subtitle">
            Enter details for your new task to keep track of important dates and completion status.
        </MudText>
    </MudPaper>

    <!-- Task Form -->
    <MudForm @ref="taskForm" Class="form-container" Valid="HandleValidSubmit">
        <MudTextField Label="Task Title" @bind-Value="taskTitle" Required="true" Variant="Variant.Outlined" Class="form-field" />
        <MudTextField Label="Task Description" @bind-Value="taskDescription" Variant="Variant.Outlined" Multiline="true" Class="form-field" />

        <!-- Start Date and Time -->
        <MudDatePicker Label="Start Date" @bind-value="startDate" Variant="Variant.Outlined" Class="form-field" />
        <MudTimePicker Label="Start Time" @bind-Time="startTime" Variant="Variant.Outlined" Class="form-field" />

        <!-- End Date and Time -->
        <MudDatePicker Label="End Date" @bind-Date="endDate" Variant="Variant.Outlined" Class="form-field" />
        <MudTimePicker Label="End Time" @bind-Time="endTime" Variant="Variant.Outlined" Class="form-field" />

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitTask" Class="submit-button">Add Task</MudButton>
    </MudForm>
</MudContainer>

<style>
    .page-container {
        padding: 24px;
    }

    .header-section {
        padding: 36px;
        margin-bottom: 36px;
        background-color: #f9f9f9;
        border-radius: 12px;
        box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.1);
    }

    .header-title {
        font-weight: 600;
        margin-bottom: 8px;
        color: #333;
    }

    .header-subtitle {
        font-size: 1rem;
        color: #666;
    }

    .form-container {
        display: flex;
        flex-direction: column;
        gap: 16px;
        padding: 24px;
        border-radius: 12px;
        background-color: #ffffff;
        box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
    }

    .form-field {
        width: 100%;
        margin-top: 12px;
    }

    .submit-button {
        width: 100%;
        padding: 12px;
        font-weight: bold;
        font-size: 16px;
        margin-top: 16px;
    }
</style>

@code {
    private MudForm taskForm;

    private string taskTitle;
    private string taskDescription;
    private DateTime? startDate;
    private TimeSpan? startTime;
    private DateTime? endDate;
    private TimeSpan? endTime;
    private bool taskCompleted = false;

    private async Task SubmitTask()
    {
        try
        {
            // Get the user ID from local storage
            int? userId = await localStorage.GetItemAsync<int?>("userId");

            if (!userId.HasValue)
            {
                snackbar.Add("User not logged in. Redirecting to login page.", Severity.Warning);
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Combine date and time for start and end
            var startDateTime = CombineDateAndTime(startDate, startTime);
            var endDateTime = CombineDateAndTime(endDate, endTime);

            // Create a new task
            var newTask = new Activity
                {
                    UserId = userId.Value,
                    TaskTitle = taskTitle,
                    TaskDescription = taskDescription,
                    StartDate = startDateTime,
                    EndDate = endDateTime,
                    Completed = taskCompleted
                };

            // Save the task to the database
            DbContext.Activities.Add(newTask);
            await DbContext.SaveChangesAsync();

            snackbar.Add("Task added successfully!", Severity.Success);
            NavigationManager.NavigateTo("/tasks");
        }
        catch (Exception ex)
        {
            snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private DateTime? CombineDateAndTime(DateTime? date, TimeSpan? time)
    {
        if (date == null)
        {
            return null;
        }

        return time.HasValue ? date.Value.Date.Add(time.Value) : date.Value.Date;
    }

    private void HandleValidSubmit()
    {
        SubmitTask();
    }
}
